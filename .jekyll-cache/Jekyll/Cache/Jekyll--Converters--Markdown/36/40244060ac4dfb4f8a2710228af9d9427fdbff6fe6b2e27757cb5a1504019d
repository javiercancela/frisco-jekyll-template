I"ü<p>Los posts son archivos en formato <a href="https://daringfireball.net/projects/markdown/">markdown</a> (aunque tambi√©n se puede usar html), que se guardan en la carpeta <code class="language-plaintext highlighter-rouge">_posts</code>. Como otros archivos, tienen un <em>front matter</em> que permite asignarles propiedades. Por ejemplo, este es el <em>front matter</em> de este post:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
title: Un blog en GitHub (III - Crear un post)
date: 2017-01-12 22:00:00 +0200
description: La experiencia de montar un blog en GitHub
categories:
  - blog
  - github
image: /images/blog.jpg
comments: true
---
</code></pre></div></div>
<p>Las propiedades ah√≠ indicadas ser√°n usadas por el archivo de <em>layout</em> del post (<code class="language-plaintext highlighter-rouge">_layouts/post.html</code>) y sus <em>includes</em> para mostrar la imagen en la cabecera, poner la fecha del post, mostrar o no los comentarios de <a href="https://disqus.com/">disqus</a>, y mostrar las categor√≠as correspondientes.</p>

<p>Para publicar el post, y en general para actualizar cualquier aspecto de nuestro sitio web, bastar√° con hacer un push a la rama por defecto del repositorio (si no la hemos cambiado, ser√° la rama <code class="language-plaintext highlighter-rouge">master</code>). Para los que no conozcan nada de Git, una buena gu√≠a b√°sica en castellano es <a href="http://rogerdudler.github.io/git-guide/index.es.html">esta</a>.</p>

<h2 id="markdown">Markdown</h2>
<p>Markdown es un formato muy simple, y lo habitual es utilizar un editor de texto para crear los documentos. Yo uso <a href="https://www.sublimetext.com/3">Sublime Text 3</a> por varios motivos: es incre√≠blemente r√°pido, tiene montones de extensiones para todo tipo de cosas, es multiplataforma y permite exportar toda su configuraci√≥n de forma sencilla. De hecho lo utilizo para editar todo el blog: html, js, css,‚Ä¶</p>

<p>Tambi√©n est√° el detalle de que es gratuito. Bueno, en realidad se puede usar sin licencia para evaluarlo, aunque incluye un recordatorio peri√≥dico para que compres una licencia si tienes pensado darle un uso continuado. La licencia vale 70$, y permite que una persona use la aplicaci√≥n en todos los dispositivos que desee.</p>

<p>Una buena referencia del formato es la gu√≠a de GitHub <a href="https://guides.github.com/features/mastering-markdown/">Mastering Markdwon</a>. Incluye ejemplos detallados y la referencia de los aspectos espec√≠ficos del Markdown que acepta GitHub.</p>

<h2 id="publicar-un-post">Publicar un post</h2>
<p>Los posts en Markdown se convierten a html, con lo que su aspecto depender√° tanto de los formatos que hayamos especificado como de los estilos que tenga nuestro sitio web. Para ver c√≥mo queda un post basta con que jekyll se est√© ejecutando en el directorio local de nuestro repositorio. Esto se puede hacer con el comando</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jekyll serve --future
</code></pre></div></div>
<p>El par√°metro <code class="language-plaintext highlighter-rouge">--future</code> le dice a Jekyll que muestre la informaci√≥n publicada en una fecha futura. Una pr√°ctica habitual consiste en indicar una fecha futura en el <em>front matter</em> del post. De este modo podemos publicarlo en cualquier momento, pero s√≥lo ser√° visible cuando llegue la fecha indicada. Sin embargo, para revisar localmente c√≥mo queda un post nos interesa verlo con independencia de su fecha, lo que conseguimos con este par√°metro.</p>

<p>En el caso de mi blog, y debido a que la plantilla usada utiliza varios <em>plugins</em> Ruby, necesitamos ejecutar Jekyll en el contexto del bundle Ruby asociado. Esto lo hacemos as√≠:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle exec jekyll serve --future
</code></pre></div></div>

:ET